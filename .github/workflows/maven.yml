# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Maven Build

on:
  push:
    paths-ignore:
      - neoemf-doc

  pull_request:
    branches: [ master ]

jobs:
  build-bundles:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Analyze with SonarCloud
        run: mvn -B jacoco:prepare-agent package jacoco:report jacoco:report-aggregate sonar:sonar -Dsonar.projectKey=org.atlanmod.neoemf:neoemf -Dsonar.organization=atlanmod -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco-aggregate/jacoco.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Build and install main project
        run: mvn clean install -DskipTests
      - name: Build benchmarks
        run: mvn clean package -f benchmarks/pom.xml


  build-plugins:
    runs-on: ubuntu-latest
    needs: build-bundles
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build plugins with Tycho
        run: mvn -B  -f plugins/eclipse install

  deploy-bundles:
    runs-on: ubuntu-latest
    needs: build-bundles
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Install GPG key
        run: |
          cat <(echo -e "${{ secrets.GPG_PRIVATE_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Initialize variables
        id: init
        run: |
          VERSION=$(mvn -B help:evaluate -Dexpression='project.version' $@ | grep -v '\[' | tail -1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "$VERSION"
      - name: Publish Snapshot to Central
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        if: contains(env.VERSION, 'SNAPSHOT' )
        run: |
          mvn \
            --no-transfer-progress \
            --batch-mode \
            clean install deploy \
            --settings .util/settings.xml \
            -DskipTests
      - name: Publish release to Central
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        if: ${{ !contains(env.VERSION, 'SNAPSHOT' ) }}
        run: |
          mvn \
            --no-transfer-progress \
            --batch-mode \
            clean package javadoc:jar source:jar-no-fork gpg:sign install deploy \
            --settings .util/settings.xml \
            -DskipTests \
            -Dgpg.passphrase=${{ secrets.GPG_PASSPHRASE }} \
            -P deploy-artifacts


# mvn clean package javadoc:jar source:jar-no-fork gpg:sign install deploy -DskipTests
#-s .util/settings.xml -DskipTests  clean package javadoc:jar source:jar-no-fork gpg:sign install deploy
#

